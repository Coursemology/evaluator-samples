# A sample Makefile for C++ autograding on Coursemology v2.
# Adapted from sample Makefile from GoogleTest.
# https://github.com/google/googletest/blob/master/googletest/make/Makefile
#
# Coursemology's evaluator runs the prepare, compile and test targets, in that order.
#
# SYNOPSIS:
#
#   make prepare  - Concatenates various code files into a single fiel for testing.
#   make compile - Build the executable.
#   make test - Run the executable from compile to generate the test report.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = $(HOME)/googletest/googletest

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
#
# This sample only has 1 test file.
TESTS = test_file

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# Main build targets

# Concatenate the gtest include, followed by the template code, then the test code.
prepare :
	echo '#include "gtest/gtest.h"' > header.cc
	cat header.cc submission/template.cc tests/unittests.cc > test_file.cc
	rm header.cc

compile : $(TESTS)

# Run the compiled binary with the tests.
# To generate the XML report file, set the environment variable GTEST_OUTPUT.
# You can use the following command, without backticks:
# `export GTEST_OUTPUT=xml:./report.xml`
test :
	./$(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o $(TESTS).cc report.xml

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

# test_file.cc is from the prepare target.
test_file.o : test_file.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c test_file.cc

test_file : test_file.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

